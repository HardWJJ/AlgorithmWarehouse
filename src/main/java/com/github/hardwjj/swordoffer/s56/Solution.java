package com.github.hardwjj.swordoffer.s56;

/**
 * 题：数组中只出现一次的数字
 * 一个整型数组里除了两个数字之外，其他的数字都出现了两次，找出这两个数。
 *
 * 解题思路：
 *   两个不相等的元素在位级表示上有一位存在不同，将数组的所有元素异或得到的结果互相消除后为不存在重复的两个元素异或的结果。
 *   diff &= -diff 得到出 diff 最右侧不为 0 的位（不存在重复的两个元素在位级表示上最右侧不同的那一位），利用这一位就可以将两个元素区分开来。
 */
public class Solution {

    /**
     * num1,num2分别为长度为1的数组。传出参数
     * 将num1[0],num2[0]设置为返回结果
     */
    public void FindNumsAppearOnce(int [] nums,int num1[] , int num2[]) {
        int diff = 0;
        // 得到两个不重复的元素的异或结果
        for (int num : nums) {
            diff ^= num;
        }

        // 得到两个不重复元素右边开始第一个不同的位
        diff &= -diff;

        // 得到两个不同的元素
        for (int num : nums) {
            // 不同的位上所有为0值进行与操作
            if((num & diff) == 0){
                // 重复两次的数(在两个不重复元素右边开始第一个不同的位为0)，和一个不重复的元素(右边开始第一个不同的位为0))
                num1[0] ^= num;
            }else {
                // 重复两次的数(在两个不重复元素右边开始第一个不同的位为1)，和一个不重复的元素(右边开始第一个不同的位1))
                num2[0] ^= num;
            }
        }

    }

}